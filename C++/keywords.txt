programming terms:

Chapter 0:
porting (related to portable applications)
instruction set (languages that a cpu understands)
binary digit (bit)
CPU family (instruction set architecture (ISA))
assembler (assembely to machine)
compiling and interpreting (translate to machine language)
programming languages:
	Machine Lnaguage
	Assembly
	high level 
important points:
	Rules
	Best Practice
	Warning
ANSI (American National Standard Institute)
ANSI C (C89 standard)
C90
compilers (ANSI C/C90 compliant)
ISO (in 1999 (C99))
C++ (standardized in 1998)
C++ (updated in 2003 (informally: C++03))
C++ updates (C++11, C++14, C++17, C++20, C++23)
monospace font (unambigous fixed-width font) (where all symbols have the same width)
compiler first step: (checking rules)
compiler second step: (translate c++ code into machine language
object names: (name.obj name.o)
linker (combine all the object files and create a file like "executable") (cross-file dependency check)
linking (the thing that linker does)
library file (collection of precompiled code)
compiler extensions (compiler-specific behaviors)
your program is ill-formed (done something that definitively violates the rules of the language)
diagnostic message
diagnostic error
diagnostic warning
increasing warning level and changing compiler extension to standard c++ (C/C++ > General tab and set Warning level to Level4 (/W4))
enable signed/unsigned conversion warnings at warning level 4 (C/C++ > Command Line tab, under Additional Options, add /w44365)
compile standard library headers at warning level 3 (instead of 4) (C/C++ > External Includes tab, set External Header Warning Level to Level3)
treat warnings as errors (C/C++ > General tab and set Treat Warnings As Errors to Yes)
select a language standard (Configuration Properties > C/C++ > Language)

Chapter 1:
computer program: sequence of instructions that tell the computer what to do
Statement: type of instruction that causes the program to perfomrm some action / smallest independent unit of computation
- most statements end with semicolons

kinds of statements:
	Declaration Statements
	Jump Statements
	Expression Statements
	Compound Statements
	Selection Statements (conditionals)
	Iteration Statements (loops)
	Try Blocks

Functions: collection of statements that get excecuted sequentially
identifier: name of a function (or object, type, template, etc...)
preprocessor directive: (e.g. #include) 
syntax: The rules that govern how sentences are constructed in a language

multi-line and single-lilne comments(//, /* */)
comments use: 
	1- to describe what something does (library, program, function)
	2- how the code accomplished the goal inside 
	3- at statement level, describing why the code is doing something
in other words:
	1- At the library, program, or function level, use comments to describe what.
	2- Inside the library, program, or function, use comments to describe how.
	3- At the statement level, use comments to describe why.

value: a single piece of data
object -> represents a region of storage (typically RAM or CPU register) that can hold a value
* objects in c++ can be anonymous (be unnamed)
varibale: an object with a name
* in general programming the term object typically refers to an unnamed object in memory, a variable, or a function
* in C++, the term object has a narrower definition that excludes functions
definition statement: a special kind of declaration statement
runtime: when the program is loaded into memory and run
allocation: The process of reserving storage for an object’s use (at runtime each object is given an actual storage location (such as RAM, or a CPU register) that it can use to store values)
data type -> what kind of value the object will store
identifier: the name that a variable is accessed by.

copy-assignment: copies the value on the right-hand side of the = operator to the variable on the left-hand side of the operator
initialization: process of specifying an initial value for an object
initializer: the syntax used to initialize an objec
indeterminate value: a value that is not predictable, sometimes called a “garbage value”
narrowing conversions: using a value that the variable can not safely hold

initialization forms:
	Default:
		- default-initialization (no initializer) (int a;): most cases leaves variable with indeterminate value
	Traditional initilization forms:
		- copy-initialization (int b = 5;): copies the value on the right-hand side of the equals into the variable being created on the left-hand side / when implicitly copied
			* copy-initialization initialization was inherited from the C language
		- direct-initialization (int c ( 6 );): allow for more efficient initialization of complex objects 
	Modern initialzation forms (preferred):
		- list-initialization (int d { 7 }; int d = {7};):
				two forms:
					int width { 5 };    // direct-list-initialization of initial value 5 into variable width (preferred)
					int height = { 6 }; // copy-list-initialization of initial value 6 into variable height (rarely used)
			* disallows narrowing conversions
			* also provides a way to initialize objects with a list of values
		- value-intialization (int e {};): special form of list-initialization (using an empty set of braces)
			* implicitly initialize the variable to zero (or whatever value is closest to zero for a given type)
		- zero-initialization: value-initialization in cases where zeroing occurs
	
other:
Aggregate initialization (see 13.8 -- Struct aggregate initialization).
Copy-list-initialization (discussed below).
Reference initialization (see 12.3 -- Lvalue references).
Static-initialization, constant-initialization, and dynamic-initialization (see 7.8 -- Why (non-const) global variables are evil).

int x {};      // value initialization
std::cin >> x; // we're immediately replacing that value so an explicit 0 would be meaningless

instantiation: means a variable has been created (allocated) and initialized (includes default initialization)
instance: An instantiated object (Most often applied to class type objects)

[[maybe_unused]]: allows us to tell the compiler that we’re okay with a variable being unused

**- 
int x {};      // value initialization
std::cin >> x; // we're immediately replacing that value so an explicit 0 would be meaningless



